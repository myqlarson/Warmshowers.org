<?php
/**
 * @file
 * Site helpers for warmshowers.org
 *
 */


/**
 * Implements hook_menu().
 *
 * @return array
 */
function warmshowers_site_menu() {
  // This page is simply to let an auth user view what the unauth user will see.
  $items['frontpage'] = array(
    'title' => 'Warm Showers',
    'page callback' => 'warmshowers_site_front_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Return empty content for our front page so it doesn't have to render real content.
 *
 * @return string
 */
function warmshowers_site_front_page() {
  return '';
}

// Alter the user-to-user contact form to (by default) copy the sender
function warmshowers_site_form_contact_mail_user_alter(&$form, $form_state) {
  $form['copy']['#default_value'] = TRUE;
}

// Alter outgoing email to add information about who it is from, etc.
function warmshowers_site_mail_alter(&$message) {
  $recipient = $message['params']['recipient'];
  $sender = $message['params']['user'];
  $base_url = $GLOBALS['base_url'];
  $langcode = $recipient->language;

  if ($message['id'] == 'contact_user_mail') {
    // Send *from* warmshowers, with a reply-to
    $message['from'] = $message['headers']['From'] = variable_get('site_mail', 'wsl@warmshowers.org');
    $message['headers']['Reply-To'] = $sender->mail;

    // This seems fraught with error, but we're trying to make sure we know the starting point of
    // the message. Hopefully contact.module always works the same way? Perhaps we should
    // just fork it to have control.
    $message['body'][1] = '<em>' . $message['body'][1] . '</em>';
    $message['body'][3] = '<br/><br/>';
    $message['body'][4] = '<strong>' . $message['body'][4] . '</strong> <br/>';
    // Note that here we're assuming that the body is an array, as it ought to
    // be. However, htmlmail makes it a string, and if htmlmail processes first,
    // this causes fatal errors. So we'll skip over this for that case.
    if (is_array($message['body'])) {
      foreach ($message['body'] as &$item) {
        $item = check_markup($item, FILTER_FORMAT_DEFAULT);
      }
      $message['body'][] = "-----------";
      $message['body'][] = '<em>' . t("This email was sent from user <a href='!sender_url'>!sender</a> (!sender_email) to user <a href='!recipient_url'>!recipient</a>. You can just reply to it and the sender will receive your email.",
        array('!sender' => check_plain($sender->fullname), '!sender_email' => $sender->mail, '!recipient' => check_plain($recipient->fullname), '!recipient_email' => $recipient->mail, '!sender_url' => "$base_url/user/{$sender->uid}", '!recipient_url' => "$base_url/user/{$recipient->uid}"), $langcode) . '</em>';
    }
    else {
      $message['body'] = check_markup($message['body'], FILTER_FORMAT_DEFAULT);
    }
  }
  else if ($message['id'] == 'contact_user_copy') {
    $message['from'] = variable_get('site_mail', 'wsl@warmshowers.org');
    // Note that here we're assuming that the body is an array, as it ought to
    // be. However, htmlmail makes it a string, and if htmlmail processes first,
    // this causes fatal errors. So we'll skip over this for that case.
    if (is_array($message['body'])) {
      foreach ($message['body'] as &$item) {
        $item = check_markup($item, FILTER_FORMAT_DEFAULT);
      }
      $message['body'][] = "-----------";
      $message['body'][] = t("This email is a copy you requested of the email sent from user <a href='!sender_url'>!sender</a> to user <a href='!recipient_url'>!recipient</a>. The member you sent it to should respond by email.",
        array('!sender' => check_plain($sender->fullname), '!sender_email' => $sender->mail, '!recipient' => check_plain($recipient->fullname), '!recipient_email' => $recipient->mail, '!sender_url' => "$base_url/user/{$sender->uid}", '!recipient_url' => "$base_url/user/{$recipient->uid}"), $langcode);
    }
    else {
      $message['body'] = check_markup($message['body'], FILTER_FORMAT_DEFAULT);
    }
  }
}

/**
 * Alter user profile form.
 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_user_profile_form_alter(&$form, &$form_state) {
  // On submit of user form, go to view instead of staying on edit.
  if (empty($form['submit']['#submit'])) {
    $form['submit']['#submit'] = $form['#submit'];
  }

  // Hide the comment_notify user-page settings, and make the default be
  // always send updates.
  $form['comment_notify_settings']['#access'] = FALSE;
  $form['comment_notify_settings']['node_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['node_notify_mailalert']['#value'] = TRUE;

  $form['comment_notify_settings']['comment_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['comment_notify_mailalert']['#value'] = TRUE;

}


/**
 * Implement hook_form_alter() to change the crazy handling in user_delete module.
 * We don't want people to have any choice but to delete it all.
 */
function warmshowers_site_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case 'user_confirm_delete':
      $form['user_delete_action'] = array(
      '#type' => 'value',
      '#value' => 'user_delete_delete',
      );
      $form['actions']['submit']['#value'] = t('Delete user account "@account"', array('@account' => $form['_account']['#value']->name));
      $form['description']['#value'] = t('The user account %account and all comments or other content associated with it will be deleted.', array('%account' => $form['_account']['#value']->name));
      break;

    // Use a translatable name for button instead of just "Delete".
    case 'user_profile_form':
      if (!empty($form['delete'])) {
        $form['delete']['#value'] = t("Delete Account");
      }
      break;

    // Get rid of the input filter stuff on comment.
    // Also change comment notification default values.
    case 'comment_form':
      $form['comment_filter']['format']['#access'] = FALSE;

      $form['notify_settings']['notify']['#default_value'] = TRUE;
      $form['notify_settings']['notify_type']['#default_value'] = 2;

      break;
  }
}


/**
 * Implements hook_block()
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 * @return array|string
 */
function warmshowers_site_block($op = 'list', $delta = 0, $edit = array()) {

  if ($op == 'list') {
    $blocks['warmshowers_site_social_links'] = array(
      'info' => t('[warmshowers_site] Social Links'),
      'cache' => BLOCK_CACHE_GLOBAL,
    );
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 'warmshowers_site_social_links':
        $block['subject'] = '';
        $block['content'] = theme('warmshowers_site_social_links');
        return $block;
    }
  }
}

/**
 * Implements hook_theme()
 */
function warmshowers_site_theme() {
  $template_path = drupal_get_path('module', 'warmshowers_site') . '/templates';
  $items = array(
    'warmshowers_site_social_links' => array(
      'path' => $template_path,
      'template' => 'warmshowers_site_social_links_block',
    ),
  );
  return $items;
}


/**
 * Implements hook_menu_alter().
 *
 * Change the permissions for tracker display.
 */
function warmshowers_site_menu_alter(&$items) {
  // Change some items on user menu to no longer be MENU_LOCAL_TASK
  $removals = array('track', 'contact', 'location');
  foreach ($removals as $removal) {
    $path = "user/%user/" . $removal;
    if (!empty($items[$path])) {
      $items[$path]['type'] = MENU_NORMAL_ITEM;
    }
  }
  $items['user/%user/view']['title'] = 'Profile';

  if (!empty($items['']))
  // We don't want the node river of news page out there.
  unset($items['node']);
}

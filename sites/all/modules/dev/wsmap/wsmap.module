<?php
/**
 * @file
 * Provides the Warmshowers map.
 */


function wsmap_perm()
{
  return array('access map detail', 'access map');
}

/**
 * Implementation of hook_menu().
 */
function wsmap_menu()
{

  $items['map'] = array(
    'title' => 'Map',
    'page callback' => 'wsmap_view',
    'access arguments' => array('access map'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['maponly'] = array(
    'title' => 'Map',
    'page callback' => 'wsmap_view',
    'access arguments' => array('access map'),
    'type' => MENU_CALLBACK,
  );
  $items['wsmap_xml_hosts'] = array(
    'title' => 'wsmap_xml_hosts',
    'page callback' => 'wsmap_xml_hosts',
    'access arguments' => array('access map'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function user_view_map()
{
  return TRUE;
}


/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */

// @todo: CLEAN UP PHP->HTML->JS (cut out HTML step)
// @todo: Remove unneeded variables, comments, and HTML
// @todo: Put in template or make it nicer to read here
function wsmap_view($uid = NULL, $zoom = 0) {

  // Add jquery.cookie.
  $cookie_path = libraries_get_path('jquery.cookie');
  if (!empty($cookie_path)) {
    drupal_add_js($cookie_path . '/jquery.cookie.js');
  }

  $wsmap_path = drupal_get_path('module', 'wsmap');
  drupal_add_js($wsmap_path . '/clusterer/Utils.js');
  drupal_add_js($wsmap_path . '/clusterer/MapUtils.js');
  drupal_add_js($wsmap_path . '/clusterer/OverlayMessage.js');
  drupal_add_js($wsmap_path . '/clusterer/Clusterer2.js');

  // JSON not supported in IE6/IE7, so we'll add conditional view of it.
  drupal_add_js($wsmap_path . '/js/json2.js');
  drupal_add_js($wsmap_path . '/js//wsmap_clusterer.js');
  drupal_add_js($wsmap_path . '/js/wsmap_map_behaviors.js');
  drupal_add_js('misc/autocomplete.js');

  if (!($default_location = location_get_browser_location())) {
    $default_location = location_country_position_from_country('us'); // Have to start them somewhere
  }
  if (!empty($uid)) {
    $account = user_load($uid);
    $default_location->latitude = $account->latitude;
    $default_location->longitude = $account->longitude;
    $default_location->zoom = $zoom;
  }

  $js_settings['wsmap'] = array(
    'mapdata_source' => url('wsmap_xml_hosts', array('absolute' => TRUE)),
    'base_path' => base_path() . $wsmap_path,
    'defaultLocation' => array(
      'latitude' => round($default_location->latitude),
      'longitude' => round($default_location->longitude),
      'zoom' => $default_location->defaultzoom,
    ),
    'loggedin' => user_access('access map detail'),
    'mapwidth' => 100,
    'maxresults' => variable_get('wsmap_max_hosts_retrievable', 2000),
  );

  if ($uid) {
    $account = user_load($uid);
    $js_settings['wsmap']['userInfo'] = array(
      'uid' => $account->uid,
      'latitude' => $account->latitude,
      'longitude' => $account->longitude,
      'zoom' => $account->zoom,
    );
  }
  drupal_add_js($js_settings, 'setting');

  drupal_set_html_head('<script src="http://maps.google.com/maps?file=api&v=2&key=' . variable_get('user_location_google_key', '') . '"  type="text/javascript"></script>');

  $output = '<a id="collapse_map" href="#">' . t('Collapse Map') . '</a>';
  $output .= "
<noscript><b>" . t("This page isn't going to be much use to you until you turn on javascript in your browser. We apologize.") . "</b></noscript>

   <div class='wsmap_instructions'></div>
	<div id='mapframe' style='width:100%;position:relative;clear:both;'>
		<div id='mapholder'>
				<div id='wsmap_map' style='width:100%;height:550px' >
				   <div id='wsmap_debug'> </div>

				</div><!-- end of wsmap_map -->
		</div><!-- end mapholder -->
		    <!-- HACK ALERT - note that style below should have left in it, but it gets removed by some js
		         I hacked this to set the left value in wsmap_clusterer.js.
		     -->
	</div> <!-- mapframe -->";

  return $output;
}


function wsmap_search_form()
{

  $countrylist = array('xx' => t('Select Country...'));
  $countrylist = array_merge($countrylist, user_location_current_countries());


  $form['country'] = array(
    '#title' => t("Country"),
    '#description' => t("Quick jump to country"),

    '#type' => 'select',
    '#options' => $countrylist,

    '#attributes' => array(
      'onChange' => "editCountryOnchange();",

    ),
    '#prefix' => "<div class='form-item-div' style='float:left'>",
    '#suffix' => "</div>",

  );
  $form['city'] = array(
    '#title' => t("City/Town/Suburb"),
    '#type' => 'textfield',
    '#size' => 45,
    '#description' => t('Try typing just a few characters and wait'),
    '#autocomplete_path' => 'location_autocomplete', // Overwritten in js above
    '#attributes' => array(
      'onFocus' => 'this.select(); '
    ),
    '#prefix' => "<div id='city-field' class='form-item-div' style='float:left'>",
    '#suffix' => "</div>",

  );

  return $form;

}

/**
 * Get accounts within a geographic region.
 * Can also just return the count of members in that region.
 *
 * Max # of hosts retrievable (limit) is controlled by the Drupal variable
 * wsmap_max_hosts_retrievable
 *
 * @param float $minlat
 * @param float $maxlat
 * @param float $minlon
 * @param float $maxlon
 * @param float $centerlat
 * @param float $centerlon
 * @param int $maxresults
 *
 * @return array
 *   Returns array containing hosts found in the range.
 */
function wsmap_get_hosts_by_location($minlat, $maxlat, $minlon, $maxlon, $centerlat, $centerlon, $limit = 2000) {

  $latlonwhere = "latitude > %f AND latitude < %f AND longitude >%f AND longitude <%f ";
  if ($minlon > $maxlon) { // The case on the 180 degrees longitude (New Zealand)
    $latlonwhere = "latitude > %f AND latitude < %f AND (longitude < %f OR longitude > %f)";
  }

  $totalsql = "SELECT COUNT(*) count FROM {user_location} l, {wsuser} w, {users} u
    WHERE $latlonwhere
    AND u.uid = l.oid AND u.uid=w.uid AND u.status>0 AND !w.isunreachable AND !w.isstale
    AND !notcurrentlyavailable
    AND u.uid NOT IN (SELECT ur.uid FROM users_roles ur WHERE ur.rid = 9)
    ";
  $avail_results_count = db_result(db_query($totalsql, $minlat, $maxlat, $minlon, $maxlon));


  // The subquery on users_roles prevents unvalidated users from showing up.
  $sql = "SELECT u.uid, w.fullname name, street, city, province, postal_code, country, latitude, longitude,
    source, notcurrentlyavailable,
    DEGREES(ACOS(SIN(RADIANS(%f)) * SIN(RADIANS(latitude))+COS(RADIANS(%f)) * COS(RADIANS(latitude)) * COS(RADIANS(%f-longitude)))) * 60 AS distance
    FROM {users} u, {user_location} l, {wsuser} w
    WHERE $latlonwhere
    AND u.uid = l.oid AND u.uid=w.uid AND u.status>0 AND !w.isunreachable AND !w.isstale
    AND !notcurrentlyavailable
    AND u.uid NOT IN (SELECT ur.uid FROM users_roles ur WHERE ur.rid = 9)
		ORDER BY distance ASC";

  $limit = min($limit, variable_get('wsmap_max_hosts_retrievable', 2000));

  $start = microtime();
  $result = db_query_range($sql, $centerlat, $centerlat, $centerlon, $minlat, $maxlat, $minlon, $maxlon, 0, $limit);
  $duration = microtime() - $start;

  $accounts = array();
  while ($row = db_fetch_array($result)) {

    // TODO: Is this too costly? It means theming an enormous number of markers
    // of which very few will be opened. Better to do it dynamically in the js?
    $row['themed_html'] = theme('wsmap_map_marker', $row);
    $accounts[] = $row;
  }
  return array(
    'status' => array(
      'delivered' => count($accounts),
      'totalresults' => $avail_results_count,
      'status' => 'complete',
    ),
    'query_data' => array(
      'sql' => $sql,
      'centerlat' => $centerlat,
      'centerlon' => $centerlon,
      'minlat' => $minlat,
      'maxlat' => $maxlat,
      'minlon' => $minlon,
      'maxlon' => $maxlon,
      'limit' => $limit,
      'duration' => $duration,
    ),
    'accounts' => $accounts
  );
}

/******* xml output for ajax request ************/

function wsmap_xml_hosts()
{

  header('Content-Type: text/xml');

  print "<?xml version='1.0' encoding='UTF-8' ?>\n";

  $minlat = (float)$_GET['minlat'];
  $maxlat = (float)$_GET['maxlat'];
  $minlon = (float)$_GET['minlon'];
  $maxlon = (float)$_GET['maxlon'];
  $centerlat = (float)$_GET['centerlat'];
  $centerlon = (float)$_GET['centerlon'];

  if (isset($_GET['maxresults'])) {
    $limit = (int)$_GET['maxresults'];
  }
  $limit = min($limit, variable_get('wsmap_max_hosts_retrievable', 2000));
  $hosts = wsmap_get_hosts_by_location($minlat, $maxlat, $minlon, $maxlon, $centerlat, $centerlon, $limit);

  print "<root>\n";

  print "<!-- minlon=$minlon, maxlon=$maxlon, minlat=$minlat, maxlat=$maxlat, centerlat=$centerlat, centerlon=$centerlon-->\n";
  print "<!-- limit=$limit -->\n";
  print "<!-- Number of items= {$hosts['status']['totalresults']} -->\n";
  print "<!-- {$hosts['query_data']['sql']}
  -->\n";

  print '<status id="status" delivered="' . $hosts['status']['delivered'] . '" totalresults="' . $hosts['status']['totalresults'] . '" status="' . $hosts['status']['status'] . '">' . $hosts['status']['status'];
  print "</status>";

  print "<hosts>\n";

  $count = 0;

  foreach ($hosts['accounts'] as $row) {

    $count++;

    print "<host\n";
    print 'u="' . $row['uid'] . '" ';
    if (user_access('access map detail')) {
      print 'n="' . xmlentities($row['name']) . '" ';
      print 's="' . xmlentities($row['street']) . '" ';
    }

    print 'c="' . xmlentities($row['city']) . '" ';
    print 'p="' . xmlentities($row['province']) . '" ';
    print 'z="' . xmlentities($row['postal_code']) . '" ';
    print 'cnt="' . xmlentities($row['country']) . '" ';
    print 'la="' . $row['latitude'] . '" ';
    print 'ln="' . $row['longitude'] . '" ';
    print 'd="' . $row['distance'] . '" ';
    print 'a="' . $row['notcurrentlyavailable'] . '" ';

    print " />\n";
    // if ($maxresults && $count < $totalresults) { $status="incomplete"; break; }
  }
  print "</hosts>";


  print "</root>";
  exit;
}


function xmlentities($string)
{
  return str_replace(array('&', '"', "'", '<', '>', '?'), array('&amp;', '&quot;', '&apos;', '&lt;', '&gt;', '&apos;'), $string);
}

/*
 * Implementation of hook_block()
 */
function wsmap_block($op = 'list', $delta = 0, $edit = array()) {

  if ($op == 'list') {
    $blocks = array(
      'wsmap_map' => array(
        'info' => t('Warmshowers Google Map'),
        'weight' => 0,
        'status' => 1,
      ),
      'wsmap_map_behaviors' => array(
        'info' => t('Warmshowers Google Map Behaviors Block'),
        'weight' => 0,
        'status' => 1,
      )
    );
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'wsmap_map':
        $blocks = array(
          'subject' => '',
          'content' => wsmap_view(),
        );
      break;
      case 'wsmap_map_behaviors':
        $blocks = array(
          'subject' => '',
          'content' => theme('wsmap_map_behaviors_block'),
        );
      break;
    }
  }

  return $blocks;
}

/*
 * Implementation of hook_theme()
 */
function wsmap_theme() {
  $template_path = drupal_get_path('module', 'wsmap') . '/templates';
  return array(
    'wsmap_map_behaviors_block' => array(
      'arguments' => array('menu' => NULL),
      'path' => $template_path,
      'template' => 'wsmap-map-behaviors-block',
    ),
    'wsmap_map_marker' => array(
      'arguments' => array('data' => NULL),
      'path' => $template_path,
      'template' => 'wsmap-map-marker',
    )
  );
}

/*
 * Preprocessing function for wsmap-map-behaviors-block.tpl.php
 */
function template_preprocess_wsmap_map_behaviors_block(&$vars) {
  // Provide KML file as js setting to toggle on and off
  $kml_file = variable_get("user_location_adv_cycling_kmz","http://www.warmshowers.org/files/kml/AdvCyclingManyRoutesUnsimplified.kmz");
  drupal_add_js(array('wsmap' => array('advCycKML' =>  $kml_file )), 'setting');
}
